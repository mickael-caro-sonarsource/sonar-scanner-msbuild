# SonarScanner for MSBuild
# Build, QA

trigger: none

pool:
  vmImage: 'vs2017-win2016'

variables:
  group: sonarsource-build-variables
  solution: 'SonarScanner.MSBuild.sln'
  sonarCloudConnection: 'SonarCloud'
  sonarCloudOrganization: 'mickael-caro16778'
  sonarCloudMsBuildProjectKey: 'test-sonarscanner-msbuild'
  sonarCloudMsBuildProjectName: '[TEST]SonarScanner for MSBuild'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: Build solution
  jobs:
    - job: build
      displayName: 'Build and analyze on SonarCloud'
      steps:
      - checkout: self
        fetchDepth: 1
      - task: NuGetToolInstaller@1
        displayName: 'Use NuGet 4.9.3'
        inputs:
          versionSpec: '4.9.3'
      - task: NuGetCommand@2
        displayName: 'NuGet restore'
        inputs:
          command: 'restore'
          restoreSolution: '$(solution)'
          feedsToUse: 'select'
      - task: PowerShell@2
        displayName: 'Promote project version'
        inputs:
          targetType: 'inline'
          script: |
            # Calculate the file path
            $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
            Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
            
            # Read the version from the file
            [xml]$versionProps = Get-Content "$versionFilePath"
            $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
            Write-Host "Sonar project version is '${sonarProjectVersion}'"
            
            # Set the variable to it can be used by other tasks
            Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;isOutput=true]$sonarProjectVersion"
      - task: SonarCloudPrepare@1
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master')))
        inputs: 
          SonarCloud: '$(sonarCloudConnection)'
          organization: '$(sonarCloudOrganization)'
          projectKey: '$(sonarCloudMsBuildProjectKey)'
          projectName: '$(sonarCloudMsBuildProjectName)'
          projectVersion: '$(SONAR_PROJECT_VERSION)'
          scannerMode: MSBuild
      - task: VSBuild@1
        inputs:
          solution: '$(solution)'
          vsVersion: '15.0'
          platform: '$(BuildPlatform)'
          configuration: '$(BuildConfiguration)'
          maximumCpuCount: true
          #msbuildArgs: '/p:DeployExtension=false /p:ZipPackageCompressionLevel=normal /p:defineConstants="SignAssembly" /p:SignAssembly=true /p:AssemblyOriginatorKeyFile="$(snk.secureFilePath)"'
      - task: VSTest@2
        inputs:
          testSelector: 'testAssemblies'
          testAssemblyVer2: |
            **\$(BuildConfiguration)\*test*.dll
            !**\obj\**
          searchFolder: '$(System.DefaultWorkingDirectory)'
          vsTestVersion: '15.0'
          codeCoverageEnabled: true
      - task: PowerShell@2
        displayName: 'Delete files created by unit tests'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Delete files created by unit tests, so that they will not be taken by the SonarCloud analysis."
            $env:TEST_FILE_TO_DELETE = [System.Environment]::GetEnvironmentVariable("TEST_FILE_TO_DELETE","User")
            Write-Host "env value : $env:TEST_FILE_TO_DELETE"
            $files = $env:TEST_FILE_TO_DELETE
            $listOfFiles = $files.Split(";;")
            foreach ($file in $listOfFiles) {
              Write-Host "Try to delete : $file"
              if([System.IO.File]::Exists($file))
              {
                Write-Host "$file exists, deleting..."
                Remove-Item -Path $file
                Write-Host "$file deleted."
              }
            }
            Get-ChildItem $(Agent.TempDirectory) -Filter 'dummy.*' -Recurse -Attributes !Directory
            Get-ChildItem $(Agent.TempDirectory) -Filter 'dummy.*' -Recurse -Attributes !Directory | Remove-Item

      - task: SonarCloudAnalyze@1
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master')))
      - task: SonarCloudPublish@1
        condition: and(succeeded(), or(eq(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranchName'], 'master')))
      - task: PowerShell@2
        displayName: 'Generate artifacts'
        inputs:
          filePath: 'scripts\\build\\ci-build.ps1'
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'DeploymentArtifacts/BuildAgentPayload/$(BuildConfiguration)'
          artifact: 'scanner-zips'

- stage: DeployToChocolateyTest
  displayName: Upload to Chocolatey
  dependsOn: 
  - Build
  jobs:
  - deployment: deploy_chocolatey_test
    displayName: Deploy to Chocolatey (Test)
    variables:
     pipelineArtifactOutputPath: $(Pipeline.Workspace)/scanner-zips
    pool:
     vmImage: 'vs2017-win2016'
    # creates an environment if it doesn't exist
    environment: 'ScannerForMsBuild-Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              itemPattern: '*.nupkg'
              targetPath: '$(Pipeline.Workspace)'
              artifactName: 'scanner-zips'
          - task: PowerShell@2
            displayName: 'Promote project version'
            inputs:
              targetType: 'inline'
              script: |
                # Calculate the file path
                $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
                Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
            
                # Read the version from the file
                [xml]$versionProps = Get-Content "$versionFilePath"
                $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
                Write-Host "Sonar project version is '${sonarProjectVersion}'"
            
                # Set the variable to it can be used by other tasks
                Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;isOutput=true]$sonarProjectVersion"
          - task: PowerShell@2
            displayName: "Install chocolatey"
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Installing chocolatey...."
                Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
                Write-Host "Choco is ready to use !"
          - task: PowerShell@2
            displayName: "Push .Net Fwk 46 package to chocolatey"
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Publishing .net 46 package...."
                choco push $(pipelineArtifactOutputPath)/sonarscanner-msbuild-net46.$(build.SONAR_PROJECT_VERSION).$(Build.BuildId).nupkg -k $(CHOCO_TEST_API_KEY) -source "https://chocolatey.org/" --yes --whatif
          - task: PowerShell@2
            displayName: "Push .Net Core 2 package to chocolatey"
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Installing chocolatey...."
                choco push $(pipelineArtifactOutputPath)/sonarscanner-msbuild-netcoreapp2.0.$(build.SONAR_PROJECT_VERSION).$(Build.BuildId).nupkg -k $(CHOCO_TEST_API_KEY) -source "https://chocolatey.org/" --yes --whatif
- stage: DeployToGitHubTest
  displayName: Release to GitHub
  dependsOn: 
  - Build
  jobs:
  - deployment: deploy_github_test
    displayName: Deploy to GitHub (Test)
    variables:
      pipelineArtifactOutputPath: $(Pipeline.Workspace)/scanner-zips
    pool:
      vmImage: 'vs2017-win2016'
    # creates an environment if it doesn't exist
    environment: 'ScannerForMsBuild-Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              itemPattern: '*.zip'
              targetPath: '$(Pipeline.Workspace)'
              artifactName: 'scanner-zips'
          - task: PowerShell@2
            displayName: 'Promote project version'
            inputs:
              targetType: 'inline'
              script: |
                # Calculate the file path
                $versionFilePath = "$env:BUILD_SOURCESDIRECTORY\scripts\version\Version.props"
                Write-Host "Reading the Sonar project version from '${versionFilePath}' ..."
            
                # Read the version from the file
                [xml]$versionProps = Get-Content "$versionFilePath"
                $sonarProjectVersion = $versionProps.Project.PropertyGroup.MainVersion
                Write-Host "Sonar project version is '${sonarProjectVersion}'"
            
                # Set the variable to it can be used by other tasks
                Write-Host "##vso[task.setvariable variable=SONAR_PROJECT_VERSION;isOutput=true]$sonarProjectVersion"
          - task: PowerShell@2
            displayName: 'Generate release note'
            inputs:
             targetType: 'inline'
             script: |
               try { 
                 Invoke-RestMethod -Uri 'https://sonar-dotnet-rel-notes.azurewebsites.net/api/gen?r=SonarSource/sonar-scanner-msbuild&m=$(build.SONAR_PROJECT_VERSION)&t=github-token' -Method Get -ErrorAction Stop -OutFile release.txt
               }
               catch [System.Net.WebException]
               { 
                 $streamReader = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream())
                 $streamReader.BaseStream.Position = 0
                 $streamReader.DiscardBufferedData()
                 $ErrResp = $streamReader.ReadToEnd()
                 $streamReader.Close()
                 Write-Host $ErrResp.ToString()
               }
          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'mickael-caro-sonarsource (1)'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tag: '$(build.SONAR_PROJECT_VERSION).$(Build.BuildId)'
              title: '$(build.SONAR_PROJECT_VERSION).$(Build.BuildId)'
              releaseNotesFilePath: 'release.txt'
              assets: '$(pipelineArtifactOutputPath)/*.zip'
              addChangeLog: false